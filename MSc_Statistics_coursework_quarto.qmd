---
title: "Coursework Template"
subtitle: 'MSc in Statistics 2025/26, Imperial College London'
author: "Andrew Duncan, Oliver Ratmann, Zak Varty, Angela Liu"
format:
  html:
    toc: true
    highlight: tango
    self-contained: true
    df-print: paged
  pdf: default
format-links: true
bibliography: "MSc_Statistics_coursework_template_quarto.bib" 
link-citations: true
---

<style type="text/css">
h1{
  font-size: 24pt;
}
h2{
  font-size: 18pt;
}
body{
  font-size: 12pt;
}
</style>

```{r setup, include = FALSE, tidy=TRUE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
include_solutions <- TRUE
```
```{r setup2, include=FALSE, tidy=TRUE}
require(rmarkdown)
require(knitr)
require(kableExtra)
# Put any library imports and other preamble here.
```

This Rmarkdown document is intended to provide a basic template that is to be used throughout the program, introducing the basic functionality of the open-source bookdown R package for writing Rmarkdown documents. [@xie2016bookdown].

Please note:

- Rmarkdown syntax for the title and document style;
- bookdown syntax to label and reference equations;
- bookdown syntax to referencing literate and provide a bib file;
- kable syntax to build clean and clear tables that can be referenced;
- Rmarkdown inline functions to collect and print all code used.

# Labeling and Referencing {#sec-labeling}

## Referencing TLDR 

- Label items of markdown using the `{#type-label}` 
- Label code output with the `#| label: type-label` 
- Reference either in the main text using `@type-label`

Example reference types: `sec`, `fig`, `tbl`, `eq`.

For full documentation see [Quarto Cross-References](https://quarto.org/docs/authoring/cross-references.html).

## Referencing Sections and Subsections 

``` markdown
# Labeling and Referencing {#sec-labeling}
...
@sec-labeling focuses on labelling and referencing parts of your document.
```

@sec-labeling focuses on labelling and referencing parts of your document.

# Sampling from the Cauchy distribution

In this question we seek to generate samples from the standard Cauchy distribution, with pdf given by
$$p(x) = \frac{1}{\pi (1 + x^2)}, \quad x \in \mathbb{R}.$${#eq-1}

The cdf associated with @eq-1 is given by

$$F(x) = \frac{1}{\pi}\arctan(x) + \frac{1}{2}.$$ {#eq-2}

**Part a.**  We apply the inversion method as described by @graham2013stochastic. We first compute the generalised inverse of the cdf @eq-2.  To this end, let $y\in [0,1]$, then

\begin{align}
    y &= F(x), \quad \iff (\#eq:3a) \\
    y &= \frac{1}{\pi}\arctan(x) + \frac{1}{2} \quad \iff \\
    y-\frac{1}{2}  &= \frac{1}{\pi}\arctan(x)  \quad \iff \\
    \pi\left(y-\frac{1}{2}\right)  &= \arctan(x)  \quad \iff \\
    x &= \tan\left(\pi\left(y-\frac{1}{2}\right)\right). 
\end{align}

By the inversion method [@graham2013stochastic], if $Y \sim U[0,1]$, then 

\begin{equation}
  X = \tan\left(\pi\left(Y-\frac{1}{2}\right)\right),
  (\#eq:4)
\end{equation}

```{r, echo=FALSE}

#######################
# Question 1a
#######################

# Part A --------------------------

generate_cauchy_samples <- function(n) {
  # Generate 'n' uniform random numbers between 0 and 1
  u <- runif(n)
  
  # Apply the inverse CDF formula to get Cauchy samples
  samples <- tan(pi * (u - 0.5))  
  return(samples)
}

num_samples = 1000

# Generate samples from the standard Cauchy distribution
cauchy_samples <- generate_cauchy_samples(num_samples)

```


**Part b.**   The empirical cdf based on $N$ samples $x_1, \ldots, x_N$ is defined to be
              $$
                \widehat{F}(t) = \frac{1}{N}\sum_{i = 1}^N \mathbf{1}[x_i \leq t], \quad x\in \mathbb{t}.
              $$
To generate the empirical cdf in R, we perform the following steps:
            
a. Generate $N$ samples from the distribution using the inversion method, as detailed in the previous question.  
b. Sort the samples in ascending order $x_1 \leq x_2 \leq x_3 \leq \ldots \leq x_N$.
c. The empirical CDF at value $x_i$ is given by $i/N$.  


In the following figure we plot the empirical cdf based on 1000 samples (black line), and compare against the analytical cdf (red line).  

```{r echo=FALSE}

#######################
# Question 1b
#######################

# Sort the samples in ascending order
sorted_samples <- sort(cauchy_samples)

# Calculate the cumulative probabilities for each sample
cumulative_probs <- (1:num_samples) / num_samples

x_values <- seq(-100, 100,  length.out = 1000)
cdf_values <- pcauchy(x_values)

# Plot the empirical CDF
plot(sorted_samples, 
     cumulative_probs, 
     type = "s", 
     xlab = "x", 
     ylab = "Empirical CDF", 
     main = "Empirical CDF of Standard Cauchy Distribution", 
     lwd = 2, lty = 1, xlim = c(-100,100))
lines(x_values, cdf_values, type = "l", 
      xlab = "x", ylab = "CDF", main = "CDF of Standard Cauchy Distribution", 
      col = 'red', lty = 2)
```

**Part c.**  We shall use the samples to compute the empirical cdf for the values $x = 0.5, 1, 10$.  

```{r echo=FALSE}

#######################
# Question 1c
#######################

calculate_ecdf <- function(x) {
    return(sum(sorted_samples <= x)/num_samples)
}

df <- data.frame(x = c(0.5, 1.0, 10.0), 
                ecdf = c(calculate_ecdf(0.5), 
                         calculate_ecdf(1.0), 
                         calculate_ecdf(10.0))
                )
kbl(df,
    caption = 'Empirical CDF', 
    label = 'ecdf',
    digits = 2) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    font_size = 12)
```

# Data analysis

## Data {#sec-data-source}
```{r echo=FALSE}
#| label: tbl-palmer
#| tbl-cap: "Example rows of the Palmer penguin dataset."
penguins |> head(n=6) |> kable()
```

## Refine your figures
### A basic scatterplot 
```{r echo=FALSE}
#| label: fig-example-scatterplot

plot(x = penguins$species,
y = penguins$body_mass,
ylab = "Body mass (g)",
xlab = "Species",
col = c(6,3,4))
abline(h = mean(penguins$body_mass, na.rm = TRUE), col = 2, lwd = 2)
```

Visualizing data in a scatter plot can be important to understand how two variables behave. @fig-example-scatterplot shows an example from the Penguins dataset @sec-data-source.

### Combine your plots 
```{r echo=FALSE}
#| layout-ncol: 2
#| label: fig-example-combineplots
#| fig-cap: "Two example plots relating to the Penguine bill dimensions."
#| fig-subcap: 
#|   - "Penguine bill dimensions with transparency adjustments"
#|   - "Penguine bill dimensions with boxtype and legend adjustments"


plot(x = penguins$bill_len,
     y = penguins$bill_dep,
     main = 'Penguine bill dimensions', 
     xlab = 'Bill length (mm)', 
     ylab = 'Bill depth (mm)', 
     cex.axis = 1.2, #  relative scaling of axis values
     cex.lab = 1.4, 
     pch = 16, 
     col = rgb(0, 0, 0, 0.7))

plot(x = penguins$bill_len,
     y = penguins$bill_dep,
     main = 'Penguine bill dimensions',
     xlab = 'Bill length (mm)', ylab = 'Bill depth (mm)',
     cex.axis = 1.2,
     cex.lab = 1.4,
     pch = 16,
     col = rgb(0,0,0,0.7))

plot(x = penguins$bill_len, 
y = penguins$bill_dep,
main = 'Penguine bill dimensions',
xlab = 'Bill length (mm)', ylab = 'Bill depth (mm)',
cex.axis = 1.2,
cex.lab = 1.4,
pch = 15 + as.numeric(penguins$species),
col = penguins$species,
bty = "l")

legend("bottomright",
title = "Species",
legend = c("Adelie", "Chinstrap", "Gentoo"),
pch = 16:18,
col = 1:3,
bty = "n"
)
```

@fig-example-combineplots shows that while there appears to be a positive association between bill length and depth within each species, this association disappears or perhaps reverses when considering all species together. 

```{r echo=FALSE}

mean(penguins$body_mass, na.rm = TRUE)
median(penguins$body_mass, na.rm = TRUE)
```

## Table
```{r echo=FALSE}
#| label: tbl-penguin
#| tbl-cap: "Count of each species in the penguin dataset."

species_counts <- table(penguins$species)
knitr::kable(species_counts, col.names = c("Species", "Count"))
```

```{r echo=FALSE}
# fit linear model
mass_lm <- lm(formula = body_mass ~ 1 + species, penguins)

# extract coefficients and standard errors
mass_lm_coefficients <- summary(mass_lm)$coefficients[,1:2]

# mass_lm_coefficients
knitr::kable(
x = round(mass_lm_coefficients, 2),
col.names = c("MLE", "Std. Err"))
```

@tbl-penguin gives the count data inferred from the Palmer penguins dataset. In your reports, all tables should have a caption and be discussed in the main text.

# Code appendix

Rather than re-paste all the code to the appendix, here is a trick which makes the markdown file output all the code (without) execution in the appendix, without any duplication.

Please keep in mind to format the code so that the entire code is clearly visible and does not run into the margins of the pdf version.  

```{r ref.label=knitr::all_labels(), echo = T, eval = F}
```

# References
[What is penguine?](https://www.bas.ac.uk/about/antarctica/wildlife/penguins/)

::: {#refs}
:::
